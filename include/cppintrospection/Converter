/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/
//cppintrospection - Copyright (C) 2005 Marco Jez

#ifndef CPPINTROSPECTION_CONVERTER_
#define CPPINTROSPECTION_CONVERTER_

#include <cppintrospection/Value>
#include <cppintrospection/variant_cast>
#include <cppintrospection/Export>
#include <list>

namespace cppintrospection
{
    struct CPPINTROSPECTION_EXPORT Converter
    {
        virtual CastType getCastType() const = 0;
        virtual Value convert(const Value& ) const = 0;
        virtual ~Converter();
    };
    
    typedef std::list<const Converter* > ConverterList;
    
    class CPPINTROSPECTION_EXPORT CompositeConverter: public Converter
    {
    public:
        CompositeConverter(const ConverterList& cvt);
        CompositeConverter(ConverterList& cvt);
        virtual ~CompositeConverter();
        
        virtual Value convert(const Value& src) const;

        virtual CastType getCastType() const;
    private:
        ConverterList cvt_;
    };

    template<typename S, typename D>
    struct StaticConverter: Converter
    {
        virtual ~StaticConverter() {}
        virtual Value convert(const Value& src) const
        {
            return static_cast<D>(variant_cast<S>(src));
        }

        virtual CastType getCastType() const { return STATIC_CAST; }
    };

    template<typename S, typename D>
    struct DynamicConverter: Converter
    {
        virtual ~DynamicConverter() {}
        virtual Value convert(const Value& src) const
        {
            return dynamic_cast<D>(variant_cast<S>(src));
        }

        virtual CastType getCastType() const { return DYNAMIC_CAST; }
    };

    template<typename S, typename D>
    struct ReinterpretConverter: Converter
    {
        virtual ~ReinterpretConverter() {}
        virtual Value convert(const Value& src) const
        {
            return reinterpret_cast<D>(variant_cast<S>(src));
        }

        virtual CastType getCastType() const { return REINTERPRET_CAST; }
    };

}

#endif

