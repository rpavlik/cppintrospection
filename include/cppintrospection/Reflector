/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/
//cppintrospection - Copyright (C) 2005 Marco Jez

#ifndef CPPINTROSPECTION_REFLECTOR_
#define CPPINTROSPECTION_REFLECTOR_

#include <cppintrospection/GenericReflectorBase>
#include <cppintrospection/Reflection>
#include <cppintrospection/Type>
#include <cppintrospection/Value>
#include <cppintrospection/PropertyInfo>
#include <cppintrospection/MethodInfo>
#include <cppintrospection/ConstructorInfo>
#include <cppintrospection/InstanceCreator>
#include <cppintrospection/ReaderWriter>
#include <cppintrospection/TypedConstructorInfo>
#include <cppintrospection/Comparator>
#include <cppintrospection/ConverterProxy>
#include <cppintrospection/Converter>
#include <cppintrospection/Utility>

#include <string>
#include <sstream>
#include <iterator>

namespace cppintrospection
{

    class CustomAttribute;
    class ReaderWriter;

    /// A Reflector is a proxy class that is used to create a new description
    /// of a given type. If the type to be described is simple and doesn't
    /// require additional details such as properties and methods, it can be
    /// reflected by simply creating a global instance of one of the classes
    /// derived from Reflector, for example ValueReflector. Other types may
    /// need further information and therefore it could be necessary to create
    /// a new subclass of Reflector or extend one of the existing subclasses.
    /// The reflected type can be set by calling Reflector's protected 
    /// methods.
    ///
    /// NOTE: when you create a Reflector for type T, it will automatically
    /// create descriptions for types T*, const T*, T&, and const T&. You
    /// should NEVER create reflectors for pointer or reference types
    /// explicitly.
    ///
    template<typename T>
    class Reflector : public GenericReflectorBase
    {
    public:
        typedef T reflected_type;
        typedef Reflector<T> inherited;

        /// Virtual destructor.
        virtual ~Reflector() {}

    protected:
        /// Direct initialization constructor. Parameter 'name' is the name
        /// of the type being reflected and 'ns' is its namespace.
        Reflector(const std::string& name, const std::string& ns, bool abstract = false);

        /// Direct initialization constructor. Parameter 'qname' is the 
        /// fully-qualified name of the type being reflected, i.e. containing
        /// both the namespace and the name (separated by "::"). 
        Reflector(const std::string& qname, bool abstract = false);

    private:
        struct PtrConstructor: ConstructorInfo
        {
            PtrConstructor(const Type* pt)
            :    ConstructorInfo(*pt, ParameterInfoList())
            {
            }

            Value createInstance(ValueList& ) const { T* x = 0; return x; }
        };

        struct ConstPtrConstructor: ConstructorInfo
        {
            ConstPtrConstructor(const Type* pt)
            :    ConstructorInfo(*pt, ParameterInfoList())
            {
            }

            Value createInstance(ValueList& ) const { const T *x = 0; return x; }
        };

        void init();
        void init_reference_types();
        void init_void_converter();

    };

    /// This reflector ought to be used to describe types that can be
    /// created on the stack. Such types are for example int, double,
    /// std::string, or other (possibly small) user-defined structs or
    /// classes. The instance creator associated to types created through
    /// this reflector will create Value objects whose internal type is T.
    template<typename T>
    struct ValueReflector: Reflector<T>
    {
        typedef ValueReflector<T> inherited;
        typedef ValueInstanceCreator<typename Reflector<T>::reflected_type> instance_creator_type;
        typedef ProtectedConstructorInstanceCreator<typename Reflector<T>::reflected_type> invalid_instance_creator_type;

        ValueReflector(const std::string& name, const std::string& ns)
        :    Reflector<T>(name, ns, false)
        {
        }

        ValueReflector(const std::string& qname)
        :    Reflector<T>(qname, false)
        {
        }    
    };

    /// This reflector is to be used to describe abstract types that can't
    /// be instantiated. For this reason a DummyInstanceCreator is used in
    /// order to avoid compiler errors.
    template<typename T>
    struct AbstractObjectReflector: Reflector<T>
    {
        typedef AbstractObjectReflector<T> inherited;
        typedef DummyInstanceCreator<typename Reflector<T>::reflected_type> instance_creator_type;
        typedef ProtectedConstructorInstanceCreator<typename Reflector<T>::reflected_type> invalid_instance_creator_type;

        AbstractObjectReflector(const std::string& name, const std::string& ns)
        :    Reflector<T>(name, ns, true)
        {
        }

        AbstractObjectReflector(const std::string& qname)
        :    Reflector<T>(qname, true)
        {
        }
    };

    /// This reflector is to be used to describe types that ought to be
    /// created on the heap. Such types are for example all classes derived
    /// from osg::Referenced. The instance creator associated to types 
    /// created through this reflector will create Value objects whose 
    /// internal type is T*.
    template<typename T>
    struct ObjectReflector: Reflector<T>
    {
        typedef ObjectReflector<T> inherited;
        typedef ObjectInstanceCreator<typename Reflector<T>::reflected_type> instance_creator_type;
        typedef ProtectedConstructorInstanceCreator<typename Reflector<T>::reflected_type> invalid_instance_creator_type;

        ObjectReflector(const std::string& name, const std::string& ns)
        :    Reflector<T>(name, ns, false)
        {
        }

        ObjectReflector(const std::string& qname)
        :    Reflector<T>(qname, false)
        {
        }
    };


    /// This reflector is a ValueReflector that should be used to define
    /// types that can be read and written from/to streams using the <<
    /// and >> operators. A StdReaderWriter is assigned by default.
    template<typename T>
    struct AtomicValueReflector: ValueReflector<T>
    {
        typedef typename ValueReflector<T>::instance_creator_type instance_creator_type;

        AtomicValueReflector(const std::string& name, const std::string& ns)
        :    ValueReflector<T>(name, ns)
        {
            this->setReaderWriter(new StdReaderWriter<T>);
            this->setComparator(new PartialOrderComparator<T>);
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));
        }

        AtomicValueReflector(const std::string& qname)
        :    ValueReflector<T>(qname)
        {
            this->setReaderWriter(new StdReaderWriter<T>);
            this->setComparator(new PartialOrderComparator<T>);
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));
        }
    };

    template<typename T>
    struct WAtomicValueReflector: ValueReflector<T>
    {
        typedef typename ValueReflector<T>::instance_creator_type instance_creator_type;

        WAtomicValueReflector(const std::string& name, const std::string& ns)
        :    ValueReflector<T>(name, ns)
        {
            this->setReaderWriter(new StdWReaderWriter<T>);
            this->setComparator(new PartialOrderComparator<T>);
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));
        }

        WAtomicValueReflector(const std::string& qname)
        :    ValueReflector<T>(qname)
        {
            this->setReaderWriter(new StdWReaderWriter<T>);
            this->setComparator(new PartialOrderComparator<T>);
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));
        }
    };


    /// This reflector is a ValueReflector that should be used to define
    /// enumerations. It assigns an EnumReaderWriter by default.
    template<typename T>
    struct EnumReflector: ValueReflector<T>
    {
        typedef EnumReflector<T> inherited;
        typedef typename ValueReflector<T>::instance_creator_type instance_creator_type;

        EnumReflector(const std::string& name, const std::string& ns)
        :    ValueReflector<T>(name, ns)
        {
            this->setReaderWriter(new EnumReaderWriter<T>);
            this->setComparator(new TotalOrderComparator<T>);
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));
        }

        EnumReflector(const std::string& qname)
        :    ValueReflector<T>(qname)
        {
            this->setReaderWriter(new EnumReaderWriter<T>);
            this->setComparator(new TotalOrderComparator<T>);
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));
        }
    };


    /// This class allows to define the means for reflecting STL containers
    /// such as std::deque and std::vector.
    template<typename T, typename VT>
    struct StdVectorReflector: ValueReflector<T>
    {
        typedef typename ValueReflector<T>::instance_creator_type instance_creator_type;

        struct Getter: PropertyGetter
        {
            virtual Value get(Value& instance, int i) const
            {
                return getInstance<T>(instance).at(i);
            }

            virtual Value get(const Value& instance, int i) const
            {
                return getInstance<T>(instance).at(i);
            }
        };

        struct Setter: PropertySetter
        {
            virtual void set(Value& instance, int i, const Value& v) const
            {
                getInstance<T>(instance).at(i) = variant_cast<const typename T::value_type& >(v);
            }
        };

        struct Counter: PropertyCounter
        {
            virtual int count(const Value& instance) const
            {
                return static_cast<int>(getInstance<T>(instance).size());
            }
        };

        struct Adder: PropertyAdder
        {
            virtual void add(Value& instance, const Value& v) const
            {
                getInstance<T>(instance).push_back(variant_cast<const typename T::value_type& >(v));
            }
        };

        struct Remover: PropertyRemover
        {
            virtual void remove(Value& instance, int i) const
            {
                T& ctr = getInstance<T>(instance);
                typename T::iterator j=ctr.begin();
                std::advance(j, i);
                ctr.erase(j);
            }
        };

        struct Inserter: PropertyInserter
        {
            virtual void insert(Value& instance, int i, const Value& v) const
            {
                T& ctr = getInstance<T>(instance);
                typename T::iterator j=ctr.begin();
                std::advance(j, i);
                ctr.insert(j, variant_cast<const typename T::value_type& >(v));
            }
        };

        StdVectorReflector(const std::string& name): ValueReflector<T>(name)
        {
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));

            PropertyInfo* pi = new PropertyInfo(typeof(T), typeof(typename T::value_type), "Item", 0, 0, 0, 0, 0, 0);
            pi->addAttribute(new CustomPropertyGetAttribute(new Getter));
            pi->addAttribute(new CustomPropertySetAttribute(new Setter));
            pi->addAttribute(new CustomPropertyCountAttribute(new Counter));
            pi->addAttribute(new CustomPropertyAddAttribute(new Adder));
            pi->addAttribute(new CustomPropertyRemoveAttribute(new Remover));
            pi->addAttribute(new CustomPropertyInsertAttribute(new Inserter));

            if (typeid(VT).before(typeid(typename T::value_type)) ||
                typeid(typename T::value_type).before(typeid(VT)))
            {
                pi->addAttribute(new PropertyTypeAttribute(typeof(VT)));
            }

            this->addProperty(pi);
        }
    };

    /// This class allows to define the means for reflecting STL containers
    /// such as std::set and std::multiset.
    template<typename T, typename VT>
    struct StdSetReflector: ValueReflector<T>
    {
        typedef typename ValueReflector<T>::instance_creator_type instance_creator_type;

        struct Getter: PropertyGetter
        {
            virtual Value get(Value& instance, int i) const
            {
                T& ctr = getInstance<T>(instance);
                typename T::iterator j=ctr.begin();
                std::advance(j, i);
                return *j;
            }

            virtual Value get(const Value& instance, int i) const
            {
                const T& ctr = getInstance<T>(instance);
                typename T::const_iterator j=ctr.begin();
                std::advance(j, i);
                return *j;
            }
        };

        struct Counter: PropertyCounter
        {
            virtual int count(const Value& instance) const
            {
                return static_cast<int>(getInstance<T>(instance).size());
            }
        };

        struct Adder: PropertyAdder
        {
            virtual void add(Value& instance, const Value& v) const
            {
                getInstance<T>(instance).insert(variant_cast<const typename T::value_type& >(v));
            }
        };

        struct Remover: PropertyRemover
        {
            virtual void remove(Value& instance, int i) const
            {
                T& ctr = getInstance<T>(instance);
                typename T::iterator j=ctr.begin();
                std::advance(j, i);
                ctr.erase(j);
            }
        };

        StdSetReflector(const std::string& name): ValueReflector<T>(name)
        {
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));

            PropertyInfo* pi = new PropertyInfo(typeof(T), typeof(typename T::value_type), "Item", 0, 0, 0, 0, 0, 0);
            pi->addAttribute(new CustomPropertyGetAttribute(new Getter));
            pi->addAttribute(new CustomPropertyCountAttribute(new Counter));
            pi->addAttribute(new CustomPropertyAddAttribute(new Adder));
            pi->addAttribute(new CustomPropertyRemoveAttribute(new Remover));

            if (typeid(VT).before(typeid(typename T::value_type)) ||
                typeid(typename T::value_type).before(typeid(VT)))
            {
                pi->addAttribute(new PropertyTypeAttribute(typeof(VT)));
            }

            this->addProperty(pi);
        }
    };

    /// This class allows to define the means for reflecting STL containers
    /// that cannot be indexed directly, such as std::list.
    template<typename T, typename VT>
    struct StdListReflector: ValueReflector<T>
    {
        typedef typename ValueReflector<T>::instance_creator_type instance_creator_type;

        struct Getter: PropertyGetter
        {
            virtual Value get(Value& instance, int i) const
            {
                T& ctr = getInstance<T>(instance);
                typename T::iterator j=ctr.begin();
                std::advance(j, i);
                return *j;
            }

            virtual Value get(const Value& instance, int i) const
            {
                const T& ctr = getInstance<T>(instance);
                typename T::const_iterator j=ctr.begin();
                std::advance(j, i);
                return *j;
            }
        };

        struct Setter: PropertySetter
        {
            virtual void set(Value& instance, int i, const Value& v) const
            {
                T& ctr = getInstance<T>(instance);
                typename T::iterator j=ctr.begin();
                std::advance(j, i);
                *j = variant_cast<const typename T::value_type& >(v);
            }
        };

        struct Counter: PropertyCounter
        {
            virtual int count(const Value& instance) const
            {
                return static_cast<int>(getInstance<T>(instance).size());
            }
        };

        struct Adder: PropertyAdder
        {
            virtual void add(Value& instance, const Value& v) const
            {
                getInstance<T>(instance).push_back(variant_cast<const typename T::value_type& >(v));
            }
        };

        struct Remover: PropertyRemover
        {
            virtual void remove(Value& instance, int i) const
            {
                T& ctr = getInstance<T>(instance);
                typename T::iterator j=ctr.begin();
                std::advance(j, i);
                ctr.erase(j);
            }
        };

        struct Inserter: PropertyInserter
        {
            virtual void insert(Value& instance, int i, const Value& v) const
            {
                T& ctr = getInstance<T>(instance);
                typename T::iterator j=ctr.begin();
                std::advance(j, i);
                ctr.insert(j, variant_cast<const typename T::value_type& >(v));
            }
        };

        StdListReflector(const std::string& name): ValueReflector<T>(name)
        {
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));

            PropertyInfo* pi = new PropertyInfo(typeof(T), typeof(typename T::value_type), "Item", 0, 0, 0, 0, 0, 0);
            pi->addAttribute(new CustomPropertyGetAttribute(new Getter));
            pi->addAttribute(new CustomPropertySetAttribute(new Setter));
            pi->addAttribute(new CustomPropertyCountAttribute(new Counter));
            pi->addAttribute(new CustomPropertyAddAttribute(new Adder));
            pi->addAttribute(new CustomPropertyRemoveAttribute(new Remover));
            pi->addAttribute(new CustomPropertyInsertAttribute(new Inserter));

            if (typeid(VT).before(typeid(typename T::value_type)) ||
                typeid(typename T::value_type).before(typeid(VT)))
            {
                pi->addAttribute(new PropertyTypeAttribute(typeof(VT)));
            }

            this->addProperty(pi);
        }
    };

    /// This class allows to define the means for reflecting STL associative
    /// containers which hold pairs of key+value, such as std::map.
    template<typename T, typename IT, typename VT>
    struct StdMapReflector: ValueReflector<T>
    {
        typedef typename ValueReflector<T>::instance_creator_type instance_creator_type;

        typedef typename T::iterator iterator;
        typedef typename T::const_iterator const_iterator;
        typedef typename T::key_type key_type;
        typedef typename T::mapped_type mapped_type;

        struct Getter: PropertyGetter
        {
            virtual Value get(Value& instance, const ValueList& indices) const
            {
                T& ctr = getInstance<T>(instance);
                const key_type& key = variant_cast<const key_type& >(indices.front());

                iterator i = ctr.find(key);
                if (i == ctr.end()) return Value();
                return i->second;
            }

            virtual Value get(const Value& instance, const ValueList& indices) const
            {
                const T& ctr = getInstance<T>(instance);
                const key_type& key = variant_cast<const key_type& >(indices.front());

                const_iterator i = ctr.find(key);
                if (i == ctr.end()) return Value();
                return i->second;
            }
        };

        struct Setter: PropertySetter
        {
            virtual void set(Value& instance, const ValueList& indices, const Value& v) const
            {
                getInstance<T>(instance).insert(std::make_pair(variant_cast<const key_type& >(indices.front()), 
                    variant_cast<const mapped_type& >(v)));
            }
        };

        struct Indexer: IndexInfo
        {
            ParameterInfoList _params;
            const Type& _itype;

            Indexer()
            :    _itype(typeof(IT))
            {
                _params.push_back(new ParameterInfo("key", typeof(key_type), 0, ParameterInfo::IN));
            }

            virtual ~Indexer()
            {
                delete _params.front();
            }

            virtual const ParameterInfoList& getIndexParameters() const
            {
                return _params;
            }

            virtual void getIndexValueSet(int /*whichindex*/, const Value& instance, ValueList& values) const
            {
                const T& ctr = getInstance<T>(instance);
                for (const_iterator i=ctr.begin(); 
                    i!=ctr.end(); 
                    ++i)
                {
                    values.push_back(Value(i->first).convertTo(_itype));
                }
            }

        protected:
        
            Indexer& operator = (const Indexer&) { return *this; }
        };

        struct Remover: PropertyRemover
        {
            virtual void remove(Value& instance, ValueList& values) const
            {
                getInstance<T>(instance).erase(getInstance<key_type>(values.front()));
            }
        };

        StdMapReflector(const std::string& name): ValueReflector<T>(name)
        {
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));

            PropertyInfo* pi = new PropertyInfo(typeof(T), typeof(typename T::mapped_type), "Item", 0, 0, 0);
            pi->addAttribute(new CustomPropertyGetAttribute(new Getter));
            pi->addAttribute(new CustomPropertySetAttribute(new Setter));
            pi->addAttribute(new CustomIndexAttribute(new Indexer));
            pi->addAttribute(new CustomPropertyRemoveAttribute(new Remover));

            if (typeid(VT).before(typeid(typename T::mapped_type)) ||
                typeid(typename T::mapped_type).before(typeid(VT)))
            {
                pi->addAttribute(new PropertyTypeAttribute(typeof(VT)));
            }

            this->addProperty(pi);
        }
    };

    template<typename T, typename PT1, typename PT2>
    struct StdPairReflector: ValueReflector<T>
    {
        typedef typename ValueReflector<T>::instance_creator_type instance_creator_type;

        struct Accessor: PropertyGetter, PropertySetter
        {
            Accessor(int i): _i(i) {}

            virtual Value get(const Value& instance) const
            {
                switch (_i)
                {
                case 0: return getInstance<T>(instance).first;
                case 1: return getInstance<T>(instance).second;
                default: return Value();
                }
            }

            virtual Value get(Value& instance) const
            {
                switch (_i)
                {
                case 0: return getInstance<T>(instance).first;
                case 1: return getInstance<T>(instance).second;
                default: return Value();
                }
            }

            virtual void set(Value& instance, const Value& v) const
            {
                T& ctr = getInstance<T>(instance);

                switch (_i)
                {
                case 0: ctr.first = variant_cast<const typename T::first_type& >(v); break;
                case 1: ctr.second = variant_cast<const typename T::second_type& >(v); break;
                }
            }

            int _i;
        };

        StdPairReflector(const std::string& name): ValueReflector<T>(name)
        {
            this->addConstructor(new TypedConstructorInfo0<T, instance_creator_type>(ParameterInfoList()));

            PropertyInfo* pi1 = new PropertyInfo(typeof(T), typeof(typename T::first_type), "first", 0, 0);
            pi1->addAttribute(new CustomPropertyGetAttribute(new Accessor(0)));
            pi1->addAttribute(new CustomPropertySetAttribute(new Accessor(0)));

            if (typeid(PT1).before(typeid(typename T::first_type)) ||
                typeid(typename T::first_type).before(typeid(PT1)))
                pi1->addAttribute(new PropertyTypeAttribute(typeof(PT1)));

            this->addProperty(pi1);

            PropertyInfo* pi2 = new PropertyInfo(typeof(T), typeof(typename T::second_type), "second", 0, 0);
            pi2->addAttribute(new CustomPropertyGetAttribute(new Accessor(1)));
            pi2->addAttribute(new CustomPropertySetAttribute(new Accessor(1)));

            if (typeid(PT2).before(typeid(typename T::second_type)) ||
                typeid(typename T::second_type).before(typeid(PT2)))
                pi2->addAttribute(new PropertyTypeAttribute(typeof(PT2)));

            this->addProperty(pi2);
        }
    };


    // TEMPLATE METHODS

    template<typename T>
    Reflector<T>::Reflector(const std::string& name, const std::string& ns, bool abstract)
    :    GenericReflectorBase(extended_typeid<T>(), name, ns, abstract)
    {
        init();
    }

    template<typename T>
    Reflector<T>::Reflector(const std::string& qname, bool abstract)
    :    GenericReflectorBase(extended_typeid<T>(), qname, abstract)
    {
        init();
    }

    template<typename T>
    void Reflector<T>::init()
    {
        // pointer type
        if (!_type->_pointed_type)
        {
            Type * ptype = registerPtype(extended_typeid<T*>(),
                new PtrReaderWriter<T*>(),
                new TotalOrderComparator<T*>());
            ptype->_cons.push_back(new PtrConstructor(ptype));
        }

        // const pointer type
        if (!_type->_pointed_type || !_type->_is_const)
        {
            Type * cptype = registerPtype(extended_typeid<const T*>(),
                new PtrReaderWriter<const T*>(),
                new TotalOrderComparator<const T*>());
            cptype->_is_const = true;
            cptype->_cons.push_back(new PtrConstructor(cptype));
        }

        init_reference_types();
        init_void_converter();

        _type->_is_defined = true;
    }

    template<typename T>
    void Reflector<T>::init_reference_types()
    {
        // reference type
        if (!_type->_referenced_type)
        {
            registerReftype(extended_typeid<T&>());
        }

        // const reference type
        if (!_type->_referenced_type || !_type->_is_const)
        {
            Type * cptype = registerReftype(extended_typeid<const T&>());
            cptype->_is_const = true;
        }
    }

    template<>
    void Reflector<void>::init_reference_types();


    template<typename T>
    void Reflector<T>::init_void_converter()
    {
        const cppintrospection::Type& st = typeof(T*);
        const cppintrospection::Type& cst = typeof(const T*);
        const cppintrospection::Type& dt = typeof(void*);
        const cppintrospection::Type& cdt = typeof(const void*);
        static cppintrospection::ConverterProxy cp1(st, dt, new cppintrospection::ReinterpretConverter<T* , void*>);
        static cppintrospection::ConverterProxy cp2(cst, cdt, new cppintrospection::ReinterpretConverter<const T* , const void*>);
        static cppintrospection::ConverterProxy cp1c(st, cdt, new cppintrospection::ReinterpretConverter<T* , const void*>);
        static cppintrospection::ConverterProxy cp3(dt, st, new cppintrospection::ReinterpretConverter<void*, T* >);
        static cppintrospection::ConverterProxy cp4(cdt, cst, new cppintrospection::ReinterpretConverter<const void*, const T* >);
        static cppintrospection::ConverterProxy cp3c(dt, cst, new cppintrospection::ReinterpretConverter<void*, const T* >);
    }

    template<>
    void Reflector<void>::init_void_converter();
}

#endif

