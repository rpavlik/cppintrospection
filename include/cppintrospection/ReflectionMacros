/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/
//cppintrospection - Copyright (C) 2005 Marco Jez

#ifndef CPPINTROSPECTION_REFLECTIONMACROS_
#define CPPINTROSPECTION_REFLECTIONMACROS_

#include <cppintrospection/Type>
#include <cppintrospection/Reflector>
#include <cppintrospection/TypeNameAliasProxy>
#include <cppintrospection/ConverterProxy>
#include <cppintrospection/Converter>
#include <cppintrospection/PublicMemberAccessor>
#include <cppintrospection/MethodInfo>

namespace cppintrospection
{

    /** Compile-time polymorphism detector.
        The enumeration constant "value" evaluates
        to true only if T is a polymorphic class,
        false otherwise. T must be a subclassable
        type.
    */
    template<typename T>
    struct is_polymorphic
    {
        struct dummy1: T { dummy1(); ~dummy1(); };
        struct dummy2: T { dummy2(); virtual ~dummy2(); };
        enum { value = sizeof(dummy1) == sizeof(dummy2) };
    };

}

// --------------------------------------------------------------------------
// "private" macros, not to be used outside this file
// --------------------------------------------------------------------------

#define COMMA                            ,
#define OSG_RM_CONCATENATE_MACRO(x, y)   x##y
#define OSG_RM_LINEID1(x, y)             OSG_RM_CONCATENATE_MACRO(x, y)
#define OSG_RM_LINEID(x)                 OSG_RM_LINEID1(x, __LINE__)


// --------------------------------------------------------------------------
// TYPE NAME ALIASES
// --------------------------------------------------------------------------

#define TYPE_NAME_ALIAS(t, n) \
    namespace { cppintrospection::TypeNameAliasProxy<t > OSG_RM_LINEID(tnalias) (#n); }
    

// --------------------------------------------------------------------------
// TYPE CONVERTERS
// --------------------------------------------------------------------------

#define I_Converter(s, d, c) \
    namespace { cppintrospection::ConverterProxy OSG_RM_LINEID(cvt) (s, d, new c); }

#define I_StaticConverter(s, d) \
    I_Converter(s, d, cppintrospection::StaticConverter<s, d>);

#define I_DynamicConverter(s, d) \
    I_Converter(s, d, cppintrospection::DynamicConverter<s, d>);
    
#define I_ReinterpretConverter(s, d) \
    I_Converter(s, d, cppintrospection::ReinterpretConverter<s, d>);


// --------------------------------------------------------------------------
// ONE-LINE REFLECTORS
// --------------------------------------------------------------------------

#define ABSTRACT_OBJECT_REFLECTOR(t) \
    namespace { cppintrospection::AbstractObjectReflector<t > OSG_RM_LINEID(reflector) (#t); }

#define ATOMIC_VALUE_REFLECTOR(t) \
    namespace { cppintrospection::AtomicValueReflector<t > OSG_RM_LINEID(reflector) (#t); }

#define WATOMIC_VALUE_REFLECTOR(t) \
    namespace { cppintrospection::WAtomicValueReflector<t > OSG_RM_LINEID(reflector) (#t); }

#define STD_PAIR_REFLECTOR(t) \
    namespace { cppintrospection::StdPairReflector<t, t::first_type, t::second_type > OSG_RM_LINEID(reflector) (#t); }

#define STD_PAIR_REFLECTOR_WITH_TYPES(t, pt1, pt2) \
    namespace { cppintrospection::StdPairReflector<t, pt1, pt2 > OSG_RM_LINEID(reflector) (#t); }

#define STD_VECTOR_REFLECTOR(t) \
    namespace { cppintrospection::StdVectorReflector<t, t::value_type> OSG_RM_LINEID(reflector) (#t); }

#define STD_VECTOR_REFLECTOR_WITH_TYPES(t, vt) \
    namespace { cppintrospection::StdVectorReflector<t, vt > OSG_RM_LINEID(reflector) (#t); }

#define STD_LIST_REFLECTOR(t) \
    namespace { cppintrospection::StdListReflector<t, t::value_type> OSG_RM_LINEID(reflector) (#t); }

#define STD_LIST_REFLECTOR_WITH_TYPES(t, vt) \
    namespace { cppintrospection::StdListReflector<t, vt > OSG_RM_LINEID(reflector) (#t); }

#define STD_SET_REFLECTOR(t) \
    namespace { cppintrospection::StdSetReflector<t, t::value_type> OSG_RM_LINEID(reflector) (#t); }

#define STD_SET_REFLECTOR_WITH_TYPES(t, vt) \
    namespace { cppintrospection::StdSetReflector<t, vt > OSG_RM_LINEID(reflector) (#t); }

#define STD_MAP_REFLECTOR(t) \
    namespace { cppintrospection::StdMapReflector<t, t::key_type, t::mapped_type > OSG_RM_LINEID(reflector) (#t); }

#define STD_MAP_REFLECTOR_WITH_TYPES(t, it, vt) \
    namespace { cppintrospection::StdMapReflector<t, it, vt > OSG_RM_LINEID(reflector) (#t); }


// --------------------------------------------------------------------------
// DETAILED REFLECTORS
// --------------------------------------------------------------------------

// this dummy function is used to prevent GCC from
// emitting an "unused variable" warning on reflector
// fields that are automatically created by following
// macros, and possibly left unused by the implementor.
// NOTE: the unnamed namespace declaration is commented
// out because it seems to confuse the MSVC++ compiler.
// Anyway, static should be ok.
//namespace 
//{    
    static inline void sink(const cppintrospection::CustomAttributeProvider *) 
    {
    } 
//}


#define BEGIN_ENUM_REFLECTOR(c)  \
     namespace { \
     struct OSG_RM_LINEID(reflector): cppintrospection::EnumReflector<c > { OSG_RM_LINEID(reflector)(): inherited(#c) { cppintrospection::ParameterInfoList params; cppintrospection::CustomAttributeProvider *cap = getType(); sink(cap);

#define BEGIN_VALUE_REFLECTOR(c)  \
     namespace { \
     struct OSG_RM_LINEID(reflector): cppintrospection::ValueReflector<c > { OSG_RM_LINEID(reflector)(): inherited(#c) { cppintrospection::ParameterInfoList params; cppintrospection::CustomAttributeProvider *cap = getType(); sink(cap);

#define BEGIN_OBJECT_REFLECTOR(c)  \
     namespace { \
     struct OSG_RM_LINEID(reflector): cppintrospection::ObjectReflector<c > { OSG_RM_LINEID(reflector)(): inherited(#c) { cppintrospection::ParameterInfoList params; cppintrospection::CustomAttributeProvider *cap = getType(); sink(cap);

#define BEGIN_ABSTRACT_OBJECT_REFLECTOR(c)  \
     namespace { \
     struct OSG_RM_LINEID(reflector): cppintrospection::AbstractObjectReflector<c > { OSG_RM_LINEID(reflector)(): inherited(#c) { cppintrospection::ParameterInfoList params; cppintrospection::CustomAttributeProvider *cap = getType(); sink(cap);

#define END_REFLECTOR \
    } } OSG_RM_LINEID(reflector_instance); }


// --------------------------------------------------------------------------
// BASIC CONFIGURATION
// --------------------------------------------------------------------------

#define I_DeclaringFile(f)                   setDeclaringFile(f);

#define I_Attribute(c)                       cap->addAttribute(new c);

#define I_ReaderWriter(x)                    setReaderWriter(new x);
#define I_Comparator(x)                      setComparator(new x);

template<typename x, typename reflected_type, bool polymorphic>
struct BaseTypeConverters
{
    BaseTypeConverters()
    {
        const cppintrospection::Type& st = typeof(reflected_type*); \
        const cppintrospection::Type& cst = typeof(const reflected_type*); \
        const cppintrospection::Type& dt = typeof(x*); \
        const cppintrospection::Type& cdt = typeof(const x*); \
        cppintrospection::Reflection::registerConverter(st, dt, new cppintrospection::StaticConverter<reflected_type* , x*>); \
        cppintrospection::Reflection::registerConverter(cst, cdt, new cppintrospection::StaticConverter<const reflected_type* , const x*>); \
        cppintrospection::Reflection::registerConverter(st, cdt, new cppintrospection::StaticConverter<reflected_type* , const x*>); \
    }
};

template<typename x, typename reflected_type>
struct BaseTypeConverters<x, reflected_type, true>
{
    BaseTypeConverters()
    {
        const cppintrospection::Type& st = typeof(reflected_type*); \
        const cppintrospection::Type& cst = typeof(const reflected_type*); \
        const cppintrospection::Type& dt = typeof(x*); \
        const cppintrospection::Type& cdt = typeof(const x*); \
        cppintrospection::Reflection::registerConverter(st, dt, new cppintrospection::StaticConverter<reflected_type* , x*>); \
        cppintrospection::Reflection::registerConverter(cst, cdt, new cppintrospection::StaticConverter<const reflected_type* , const x*>); \
        cppintrospection::Reflection::registerConverter(st, cdt, new cppintrospection::StaticConverter<reflected_type* , const x*>); \
        cppintrospection::Reflection::registerConverter(dt, st, new cppintrospection::DynamicConverter<x*, reflected_type* >); \
        cppintrospection::Reflection::registerConverter(cdt, cst, new cppintrospection::DynamicConverter<const x*, const reflected_type* >); \
        cppintrospection::Reflection::registerConverter(dt, cst, new cppintrospection::DynamicConverter<x*, const reflected_type* >); \
    }
};

#define I_BaseType(x) \
    { \
     this->addBaseType(typeof( x )); \
     BaseTypeConverters< x , reflected_type, cppintrospection::is_polymorphic <x >::value > btc; \
    }

#define I_VirtualBaseType(x) \
    { \
     this->addBaseType(typeof( x )); \
     BaseTypeConverters< x, reflected_type, false > btc; \
    }

#define I_EnumLabel(x)                       this->addEnumLabel(x, #x, true);






// --------------------------------------------------------------------------
// PUBLIC MEMBER PROPERTIES
// --------------------------------------------------------------------------

#define I_PublicMemberProperty(t, n) \
  cap=this->addProperty(new cppintrospection::PropertyInfo(cppintrospection::Reflection::getType(extended_typeid< reflected_type >()), cppintrospection::Reflection::getType(extended_typeid< t >()), #n, 0, 0)); \
  cap->addAttribute(new cppintrospection::CustomPropertyGetAttribute(new cppintrospection::PublicMemberAccessor< reflected_type, t >(&reflected_type::n))); \
  cap->addAttribute(new cppintrospection::CustomPropertySetAttribute(new cppintrospection::PublicMemberAccessor< reflected_type, t >(&reflected_type::n)));


// --------------------------------------------------------------------------
// PROPERTIES
// --------------------------------------------------------------------------

#define I_SimpleProperty(t, n, get, set) \
    cap=this->addProperty(new cppintrospection::PropertyInfo(cppintrospection::Reflection::getType(extended_typeid< reflected_type >()), cppintrospection::Reflection::getType(extended_typeid< t >()), #n, \
      get, \
      set))

#define I_ArrayProperty(t, n, get, set, count, add, insert, remove) \
    cap=this->addProperty(new cppintrospection::PropertyInfo(cppintrospection::Reflection::getType(extended_typeid< reflected_type >()), cppintrospection::Reflection::getType(extended_typeid< t >()), #n, \
      get, \
      set, \
      count, \
      add, \
      insert, \
      remove))

#define I_IndexedProperty(t, n, get, set, remove) \
    cap=this->addProperty(new cppintrospection::PropertyInfo(cppintrospection::Reflection::getType(extended_typeid< reflected_type >()), cppintrospection::Reflection::getType(extended_typeid< t >()), #n, \
      get, \
      set, \
      remove))
// --------------------------------------------------------------------------
// CONSTRUCTORS
// --------------------------------------------------------------------------

#define I_Constructor             I_Constructor0
#define I_ConstructorWithDefaults I_ConstructorWithDefaults0

#define D_ConstructorInfoType cppintrospection::ConstructorInfo*
#define D_ConstructorInfoType cppintrospection::ConstructorInfo*

namespace Properties
{
    const bool NON_EXPLICIT     = false;
    const bool EXPLICIT         = true;
}

#define I_Constructor0(signature, briefHelp, detailedHelp)    \
  params.clear(); \
  D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo0< reflected_type, instance_creator_type >(params, briefHelp, detailedHelp)); sink(signature)

#define I_Constructor1(A0, P0, N0, isExplicit, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo1< reflected_type, instance_creator_type, P0 >(params, isExplicit, briefHelp, detailedHelp)); sink(signature)

#define I_Constructor2(A0, P0, N0, A1, P1, N1, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo2< reflected_type, instance_creator_type, P0, P1 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor3(A0, P0, N0, A1, P1, N1, A2, P2, N2, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo3< reflected_type, instance_creator_type, P0, P1, P2 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor4(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo4< reflected_type, instance_creator_type, P0, P1, P2, P3 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor5(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo5< reflected_type, instance_creator_type, P0, P1, P2, P3, P4 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor6(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo6< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor7(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo7< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor8(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo8< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor9(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo9< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor10(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo10< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor11(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo11< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor12(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo12< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor13(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo13< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor14(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo14< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor15(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo15< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_Constructor16(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, A15, P15, N15, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15)); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo16< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults0(signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo0< reflected_type, instance_creator_type>(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults1(A0, P0, N0, D0, isExplicit, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo1< reflected_type, instance_creator_type, P0 >(params, isExplicit, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults2(A0, P0, N0, D0, A1, P1, N1, D1, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo2< reflected_type, instance_creator_type, P0, P1 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults3(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo3< reflected_type, instance_creator_type, P0, P1, P2 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults4(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo4< reflected_type, instance_creator_type, P0, P1, P2, P3 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults5(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo5< reflected_type, instance_creator_type, P0, P1, P2, P3, P4 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults6(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo6< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults7(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo7< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults8(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo8< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults9(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo9< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults10(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo10< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults11(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo11< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults12(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo12< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults13(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo13< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults14(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo14< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults15(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo15< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ConstructorWithDefaults16(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, A15, P15, N15, D15, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15, cppintrospection::Value(D15))); \
    D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo16< reflected_type, instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor0(signature, briefHelp, detailedHelp)    \
  params.clear(); \
  D_ConstructorInfoType signature = addConstructor(new cppintrospection::TypedConstructorInfo0< reflected_type, invalid_instance_creator_type>(params, briefHelp, detailedHelp)); sink(signature)

#define I_ProtectedConstructor1(A0, P0, N0, isExplicit, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo1< reflected_type, invalid_instance_creator_type, P0 >(params, isExplicit, briefHelp, detailedHelp)); sink(signature)

#define I_ProtectedConstructor2(A0, P0, N0, A1, P1, N1, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo2< reflected_type, invalid_instance_creator_type, P0, P1 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor3(A0, P0, N0, A1, P1, N1, A2, P2, N2, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo3< reflected_type, invalid_instance_creator_type, P0, P1, P2 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor4(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo4< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor5(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo5< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor6(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo6< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor7(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo7< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor8(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo8< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor9(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo9< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor10(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo10< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor11(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo11< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor12(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo12< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor13(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo13< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor14(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo14< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor15(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo15< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructor16(A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, A15, P15, N15, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15)); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo16< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults0(signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo0< reflected_type, invalid_instance_creator_type>(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults1(A0, P0, N0, D0, isExplicit, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo1< reflected_type, invalid_instance_creator_type, P0 >(params, isExplicit, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults2(A0, P0, N0, D0, A1, P1, N1, D1, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo2< reflected_type, invalid_instance_creator_type, P0, P1 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults3(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo3< reflected_type, invalid_instance_creator_type, P0, P1, P2 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults4(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo4< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults5(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo5< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults6(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo6< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults7(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo7< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults8(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo8< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults9(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo9< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults10(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo10< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults11(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo11< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults12(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo12< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults13(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo13< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults14(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo14< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults15(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo15< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14 >(params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedConstructorWithDefaults16(A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, A15, P15, N15, D15, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15, cppintrospection::Value(D15))); \
    D_ConstructorInfoType signature = addProtectedConstructor(new cppintrospection::TypedConstructorInfo16< reflected_type, invalid_instance_creator_type, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15 >(params, briefHelp, detailedHelp)); sink(signature) 


// --------------------------------------------------------------------------
// METHODS
// --------------------------------------------------------------------------

#define I_Method                    I_Method0
#define I_StaticMethod              I_StaticMethod0
#define I_MethodWithDefaults        I_MethodWithDefaults0
#define I_StaticMethodWithDefaults  I_StaticMethodWithDefaults0

#define D_MethodInfoType cppintrospection::MethodInfo*

namespace Properties
{
    const cppintrospection::MethodInfo::VirtualState NON_VIRTUAL        = cppintrospection::MethodInfo::NON_VIRTUAL;
    const cppintrospection::MethodInfo::VirtualState VIRTUAL            = cppintrospection::MethodInfo::VIRTUAL;
    const cppintrospection::MethodInfo::VirtualState PURE_VIRTUAL       = cppintrospection::MethodInfo::PURE_VIRTUAL;

    const bool CONST            = true;
    const bool NON_CONST        = false;
}

#define I_Method0(ret, fn, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo0< reflected_type, ret >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method1(ret, fn, A0, P0, N0, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo1< reflected_type, ret, P0 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method2(ret, fn, A0, P0, N0, A1, P1, N1, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo2< reflected_type, ret, P0, P1 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method3(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo3< reflected_type, ret, P0, P1, P2 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method4(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo4< reflected_type, ret, P0, P1, P2, P3 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method5(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo5< reflected_type, ret, P0, P1, P2, P3, P4 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method6(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo6< reflected_type, ret, P0, P1, P2, P3, P4, P5 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method7(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo7< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method8(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo8< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method9(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo9< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method10(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo10< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method11(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo11< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method12(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo12< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method13(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo13< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method14(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo14< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method15(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo15< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_Method16(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, A15, P15, N15, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo16< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults0(ret, fn, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo0< reflected_type, ret >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults1(ret, fn, A0, P0, N0, D0, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo1< reflected_type, ret, P0 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults2(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo2< reflected_type, ret, P0, P1 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults3(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo3< reflected_type, ret, P0, P1, P2 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults4(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo4< reflected_type, ret, P0, P1, P2, P3 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults5(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo5< reflected_type, ret, P0, P1, P2, P3, P4 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults6(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo6< reflected_type, ret, P0, P1, P2, P3, P4, P5 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults7(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo7< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults8(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo8< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults9(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo9< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults10(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo10< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults11(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo11< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults12(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo12< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults13(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo13< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults14(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo14< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults15(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo15< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_MethodWithDefaults16(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, A15, P15, N15, D15, virtualState, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15, cppintrospection::Value(D15))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::TypedMethodInfo16< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15 >(qualifyName(#fn), &reflected_type::fn, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod0(ret, fn, signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo0< reflected_type, ret >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod1(ret, fn, A0, P0, N0, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo1< reflected_type, ret, P0 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod2(ret, fn, A0, P0, N0, A1, P1, N1, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo2< reflected_type, ret, P0, P1 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod3(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo3< reflected_type, ret, P0, P1, P2 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod4(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo4< reflected_type, ret, P0, P1, P2, P3 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod5(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo5< reflected_type, ret, P0, P1, P2, P3, P4 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod6(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo6< reflected_type, ret, P0, P1, P2, P3, P4, P5 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod7(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo7< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod8(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo8< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod9(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo9< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod10(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo10< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod11(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo11< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod12(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo12< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod13(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo13< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod14(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo14< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod15(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo15< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethod16(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, A15, P15, N15, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15)); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo16< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults0(ret, fn, signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo0< reflected_type, ret >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults1(ret, fn, A0, P0, N0, D0, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo1< reflected_type, ret, P0 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults2(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo2< reflected_type, ret, P0, P1 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults3(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo3< reflected_type, ret, P0, P1, P2 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults4(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo4< reflected_type, ret, P0, P1, P2, P3 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults5(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo5< reflected_type, ret, P0, P1, P2, P3, P4 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults6(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo6< reflected_type, ret, P0, P1, P2, P3, P4, P5 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults7(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo7< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults8(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo8< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults9(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo9< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults10(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo10< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults11(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo11< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults12(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo12< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults13(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo13< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults14(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo14< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults15(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo15< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_StaticMethodWithDefaults16(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, A15, P15, N15, D15, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15, cppintrospection::Value(D15))); \
    D_MethodInfoType signature = addMethod(new cppintrospection::StaticMethodInfo16< reflected_type, ret, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15 >(qualifyName(#fn), &reflected_type::fn, params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod0(ret, fn, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod1(ret, fn, A0, P0, N0, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod2(ret, fn, A0, P0, N0, A1, P1, N1, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType( extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType( extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod3(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod4(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod5(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod6(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod7(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod8(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod9(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod10(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod11(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod12(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod13(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod14(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod15(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethod16(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, A15, P15, N15, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults0(ret, fn, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults1(ret, fn, A0, P0, N0, D0, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults2(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults3(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults4(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults5(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults6(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults7(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults8(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults9(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults10(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults11(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults12(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults13(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults14(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults15(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedMethodWithDefaults16(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, A15, P15, N15, D15, virtualState, isConst, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15, cppintrospection::Value(D15))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::TypedProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), isConst, params, virtualState, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod0(ret, fn, signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod1(ret, fn, A0, P0, N0, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod2(ret, fn, A0, P0, N0, A1, P1, N1, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod3(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod4(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod5(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod6(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod7(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod8(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod9(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod10(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod11(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod12(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod13(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod14(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod15(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethod16(ret, fn, A0, P0, N0, A1, P1, N1, A2, P2, N2, A3, P3, N3, A4, P4, N4, A5, P5, N5, A6, P6, N6, A7, P7, N7, A8, P8, N8, A9, P9, N9, A10, P10, N10, A11, P11, N11, A12, P12, N12, A13, P13, N13, A14, P14, N14, A15, P15, N15, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0)); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1)); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2)); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3)); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4)); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5)); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6)); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7)); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8)); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9)); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10)); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11)); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12)); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13)); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14)); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15)); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults0(ret, fn, signature, briefHelp, detailedHelp) \
    params.clear(); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults1(ret, fn, A0, P0, N0, D0, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults2(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults3(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults4(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults5(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults6(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults7(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults8(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults9(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults10(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults11(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults12(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults13(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults14(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults15(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#define I_ProtectedStaticMethodWithDefaults16(ret, fn, A0, P0, N0, D0, A1, P1, N1, D1, A2, P2, N2, D2, A3, P3, N3, D3, A4, P4, N4, D4, A5, P5, N5, D5, A6, P6, N6, D6, A7, P7, N7, D7, A8, P8, N8, D8, A9, P9, N9, D9, A10, P10, N10, D10, A11, P11, N11, D11, A12, P12, N12, D12, A13, P13, N13, D13, A14, P14, N14, D14, A15, P15, N15, D15, signature, briefHelp, detailedHelp) \
    params.clear(); \
    params.push_back(new cppintrospection::ParameterInfo(#N0, cppintrospection::Reflection::getType(extended_typeid< P0 >()), cppintrospection::ParameterInfo::A0, cppintrospection::Value(D0))); \
    params.push_back(new cppintrospection::ParameterInfo(#N1, cppintrospection::Reflection::getType(extended_typeid< P1 >()), cppintrospection::ParameterInfo::A1, cppintrospection::Value(D1))); \
    params.push_back(new cppintrospection::ParameterInfo(#N2, cppintrospection::Reflection::getType(extended_typeid< P2 >()), cppintrospection::ParameterInfo::A2, cppintrospection::Value(D2))); \
    params.push_back(new cppintrospection::ParameterInfo(#N3, cppintrospection::Reflection::getType(extended_typeid< P3 >()), cppintrospection::ParameterInfo::A3, cppintrospection::Value(D3))); \
    params.push_back(new cppintrospection::ParameterInfo(#N4, cppintrospection::Reflection::getType(extended_typeid< P4 >()), cppintrospection::ParameterInfo::A4, cppintrospection::Value(D4))); \
    params.push_back(new cppintrospection::ParameterInfo(#N5, cppintrospection::Reflection::getType(extended_typeid< P5 >()), cppintrospection::ParameterInfo::A5, cppintrospection::Value(D5))); \
    params.push_back(new cppintrospection::ParameterInfo(#N6, cppintrospection::Reflection::getType(extended_typeid< P6 >()), cppintrospection::ParameterInfo::A6, cppintrospection::Value(D6))); \
    params.push_back(new cppintrospection::ParameterInfo(#N7, cppintrospection::Reflection::getType(extended_typeid< P7 >()), cppintrospection::ParameterInfo::A7, cppintrospection::Value(D7))); \
    params.push_back(new cppintrospection::ParameterInfo(#N8, cppintrospection::Reflection::getType(extended_typeid< P8 >()), cppintrospection::ParameterInfo::A8, cppintrospection::Value(D8))); \
    params.push_back(new cppintrospection::ParameterInfo(#N9, cppintrospection::Reflection::getType(extended_typeid< P9 >()), cppintrospection::ParameterInfo::A9, cppintrospection::Value(D9))); \
    params.push_back(new cppintrospection::ParameterInfo(#N10, cppintrospection::Reflection::getType(extended_typeid< P10 >()), cppintrospection::ParameterInfo::A10, cppintrospection::Value(D10))); \
    params.push_back(new cppintrospection::ParameterInfo(#N11, cppintrospection::Reflection::getType(extended_typeid< P11 >()), cppintrospection::ParameterInfo::A11, cppintrospection::Value(D11))); \
    params.push_back(new cppintrospection::ParameterInfo(#N12, cppintrospection::Reflection::getType(extended_typeid< P12 >()), cppintrospection::ParameterInfo::A12, cppintrospection::Value(D12))); \
    params.push_back(new cppintrospection::ParameterInfo(#N13, cppintrospection::Reflection::getType(extended_typeid< P13 >()), cppintrospection::ParameterInfo::A13, cppintrospection::Value(D13))); \
    params.push_back(new cppintrospection::ParameterInfo(#N14, cppintrospection::Reflection::getType(extended_typeid< P14 >()), cppintrospection::ParameterInfo::A14, cppintrospection::Value(D14))); \
    params.push_back(new cppintrospection::ParameterInfo(#N15, cppintrospection::Reflection::getType(extended_typeid< P15 >()), cppintrospection::ParameterInfo::A15, cppintrospection::Value(D15))); \
    D_MethodInfoType signature = addProtectedMethod(new cppintrospection::StaticProtectedMethodInfo(qualifyName(#fn), typeof( reflected_type ), params, briefHelp, detailedHelp)); sink(signature) 

#endif


